generator client {
  provider = "prisma-client-js"
}

// Connection with mongodb + the url of the database is stored in the .env file
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// THIS IS MODEL FOR CHAT WHEN ADDED TO EACH OTHER 
model UserContact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  contactId String   @db.ObjectId
  user      User     @relation("UserContactsAsUser", fields: [userId], references: [id])
  contact   User     @relation("UserContactsAsContact", fields: [contactId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, contactId])
  @@map("user_contacts")
}

// This model represents a chat message between two users
// -prisma changes names to camel case automatically so if the name of mode here is ChatMessage in code you shall use chatMessage
model ChatMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  message     String
  senderId    String
  receiverId  String
  secondaryId String?   
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  // THE NEW CODE ADDED IF CAUSING ERRORS THEN REMOVE IT.
  contacts      UserContact[] @relation("UserContactsAsUser")
  addedBy       UserContact[] @relation("UserContactsAsContact")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
